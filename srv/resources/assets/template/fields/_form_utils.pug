mixin labelWithInfo(name)
  span(
    data-provide="popover"
    data-container="body"
    data-placement="top"
    data-bind=`
      text : ${name}.field.meta.label,
      attr : {'data-content': ${name}.field.meta.infoText1},
      css  : {fieldInfo: ${name}.field.meta.infoText1},
    `)

mixin fieldControlGroup
  .form-group.has-feedback(data-bind=`
    css     : {'has-error': {{name}}Not},
    visible : {{name}}Visible,
  `)
    label.col-sm-4.control-label
      +labelWithInfo("{{name}}")
    .col-sm-8
      .input-group.input-group-sm
        block

mixin defaultInput(nameMod, dataBinds, change, attrs)
  - var ev = 'afterpaste'
  - var updateEvents = typeof change === 'string' ? [change, ev] : change.concat(ev)
  input.form-control(
    type="text"
    autocomplete="off"
    name=`{{ name }}${nameMod}`
    style=`
      {{# meta.transform }}
        text-transform: {{meta.transform}};
      {{/ meta.transform }}
    `
    data-bind=`
      value       : {{name}}${nameMod},
      valueUpdate : ${JSON.stringify(updateEvents)},
      readonly    : {{name}}Disabled,

      {{# meta.regexp }}
        css: {'re-failed': {{name}}Regexp},
      {{/ meta.regexp}}

      ${dataBinds}
    `)&attributes(attributes)
  +savingSpinner

mixin localDateTimeInput(nameMod, dataBinds, change)
  +defaultInput(nameMod, dataBinds, change)
  .local-datetime-button(data-bind=`
    text  : {{name}}TimeZone() ? {{name}}CityLabel() : 'Локальное время',
    click : {{name}}SwitchTimeZone,
  `)

mixin rawDateInput(nameMod, dataBinds, change)
  label.input-group.input-group-sm.date(data-bind=`
    readonly      : {{name}}Disabled,
    pickerDisable : {{name}}.disabled,
  `)
    +defaultInput(
      nameMod,
      dataBinds + 'datepicker: !{{name}}Disabled(),' + 'css: { \'date-failed\': {{name}}InvalidDate}',
      change)&attributes(attributes)
    block

mixin dateInput(nameMod, dataBinds, change)
  +rawDateInput(nameMod, dataBinds, change)&attributes(attributes)
    span.input-group-addon
      span.glyphicon.glyphicon-calendar

mixin savingSpinner
  span.glyphicon.glyphicon-refresh.glyphicon-refresh-animate.form-control-feedback.saving-spinner(
    data-bind='sync: {{name}}Sync'
    style='display: none;')

mixin dictInput(nameMod)
  input.form-control(
    type="text"
    class="{{# meta.addClass }}{{meta.addClass}}{{/ meta.addClass }}"
    autocomplete="off"
    name="{{name}}"
    data-bind=`
      value         : {{name}}${nameMod},
      valueUpdate   : 'change',
      disabled      : {{name}}Disabled,
      pickerDisable : {{name}}Disabled,
      bindDict      : '{{name}}',

      {{# meta.regexp }}
        css: {'re-failed': {{name}}Regexp},
      {{/ meta.regexp }}
    `)

mixin dictInputChevron(nameMod, iconClass)
  +dictInput(nameMod)
  +savingSpinner
  span.input-group-addon
    span.glyphicon(class=iconClass)

mixin dict(nameMod, iconClass)
  +fieldControlGroup
    +dictInputChevron(nameMod, iconClass)

mixin dictMany(nameMod, iconClass)
  .form-group.has-feedback(data-bind=`
    {{# meta.required }}
      css: {'has-error': {{name}}Not},
    {{/ meta.required }}
  `)
    label.col-sm-4.control-label
      +labelWithInfo("{{name}}")
    .col-sm-8
      div
        .input-group.input-group-sm
          +dictInputChevron(nameMod, iconClass)
      div
        // ko if: {{name}}Locals().length
        ul(data-bind="foreach: {{name}}Locals")
          li
            span(data-bind="text: label")
            a(href="" data-bind="click: remove") &nbsp ×
        // /ko

mixin checkboxField(name)
  .checkbox
    label
      input(
        type="checkbox"
        data-bind=`
          attr        : {name: ${name}},
          checked     : ${name},
          valueUpdate : 'change',
          disabled    : ${name}.disabled,
        `)&attributes(attributes)
      +labelWithInfo(name)

mixin checkboxTpl(name)
  .form-group(data-bind="visible: {{name}}Visible")
    .col-sm-4
    label.col-sm-8.control-label(style="text-align: left")
      +checkboxField(name)
