#    -*- mode: org -*-


Archived entries from file /home/sphinx/projects/carma/README.org


* DONE Indexed fields
  CLOSED: [2012-03-08 Чтв 15:55]
  :PROPERTIES:
  :ARCHIVE_TIME: 2012-03-08 Чтв 15:55
  :ARCHIVE_FILE: ~/projects/carma/README.org
  :ARCHIVE_OLPATH: To do
  :ARCHIVE_CATEGORY: README
  :ARCHIVE_TODO: DONE
  :END:
  Fields should support "index" boolean attribute, in which case
  inverse index for that field should be created in Redis.

  Consider {"name": "code", "index": true} field for `scp` model,
  then if code field of model N is set to K, update must append N to
  `scp:code:K` to N. This will allow faster searching by field
  contents.

* DONE Address model
  CLOSED: [2012-03-10 Сбт 15:54]
  :PROPERTIES:
  :ARCHIVE_TIME: 2012-03-22 Чтв 15:55
  :ARCHIVE_FILE: ~/projects/carma/README.org
  :ARCHIVE_OLPATH: To do
  :ARCHIVE_CATEGORY: README
  :ARCHIVE_TODO: DONE
  :END:

* DONE VIN model
  CLOSED: [2012-03-10 Сбт 15:54]
  :PROPERTIES:
  :ARCHIVE_TIME: 2012-03-22 Чтв 15:55
  :ARCHIVE_FILE: ~/projects/carma/README.org
  :ARCHIVE_OLPATH: To do
  :ARCHIVE_CATEGORY: README
  :ARCHIVE_TODO: DONE
  :END:

* TODO Field contents are not saved if autocomplete menu is clicked
  :PROPERTIES:
  :ARCHIVE_TIME: 2012-04-01 Вск 20:18
  :ARCHIVE_FILE: ~/projects/carma/README.org
  :ARCHIVE_OLPATH: To do
  :ARCHIVE_CATEGORY: README
  :ARCHIVE_TODO: TODO
  :END:

* DONE [/] Dictionaries
  CLOSED: [2012-04-01 Вск 21:33]
  :PROPERTIES:
  :ARCHIVE_TIME: 2012-04-01 Вск 21:33
  :ARCHIVE_FILE: ~/projects/carma/README.org
  :ARCHIVE_OLPATH: To do
  :ARCHIVE_CATEGORY: README
  :ARCHIVE_TODO: DONE
  :END:
  Implement label←→value translation (at knockBackbone@main.js)
* Dictionaries
  :PROPERTIES:
  :ARCHIVE_TIME: 2013-12-14 Сб. 13:41
  :ARCHIVE_FILE: ~/projects/carma/README.org
  :ARCHIVE_CATEGORY: README
  :END:
** Syntax
   `dictionaries.json` holds a list of dictionary records.

   Flat syntax for dictionary record:

   #+BEGIN_SRC javascript
     "Transmission": {
         "entries": [
             {
                 "value": "auto",
                 "label": "Автоматическая"
             },
             {
                 "value": "mech",
                 "label": "Механическая"
             },
             {
                 "value": "robot",
                 "label": "Роботизированная"
             }
         ]
     },
   #+END_SRC

   Each entry contains `label` which is readable value and `value`
   which is actual fields contents stored on server.

   If `dictionaryParent` is set in meta description of model field,
   only a fraction of dictionary entries will be shown, depending on
   value of field marked as parent.

   In this case, `entries` is a hash where `key` is the value of
   parent field required to show dictionary items:

   #+BEGIN_SRC javascript
     "CarModels": {
         "entries": {
             "vw": [
                 {
                     "value": "passat",
                     "label": "VW Passat"
                 },
                 {
                     "value": "touareg",
                     "label": "VW Touareg"
                 },
                 {
                     "value": "tig",
                     "label": "VW Tiguan"
                 },
                 {
                     "value": "jetta",
                     "label": "VW Jetta"
                 }
             ],
             "chevy": [
                 {
                     "value": "aveo",
                     "label": "Chevrolet Aveo"
                 },
                 {
                     "value": "blazer",
                     "label": "Chevrolet Blazer"
                 },
                 {
                     "value": "cruze",
                     "label": "Chevrolet Cruze"
                 },
                 {
                     "value": "epica",
                     "label": "Chevrolet Epica"
                 },
                 {
                     "value": "lacetti",
                     "label": "Chevrolet Lacetti"
                 }
             ]
         }
     }
     
   #+END_SRC

   Labels and values *must not* overlap in different categories.

   If no value specified, then label is used instead.
** Typeahead integration
   Our Typeahead allows for dictionary record to be passed as
   `data-source` attribute:

   #+BEGIN_SRC html
     data-source="global.dictionaries['{{meta.dictionaryName}}']"
     data-bind="value: {{ name }},
                valueUpdate: 'afterkeydown'
                {{# meta.dictionaryParent }},
                attr: { 'data-parent': {{ meta.dictionaryParent }} }
                {{/ meta.dictionaryParent }}"
     data-provide="typeahead"
   #+END_SRC

   If `data-parent` attribute is set (which is the case when
   `dictionaryParent` is specified in field meta), then respective
   entry of dictionary is used for list of typeahead items.
   
   Typeahead is recreated on every focus if parent value is changed.


