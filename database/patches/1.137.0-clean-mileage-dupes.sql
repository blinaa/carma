-- dupe groups (dupe predicates generated by vinnie)
create temporary table "Contract_dupes" as select array_agg(id) from "Contract" c where exists (select 1 from "Contract" q  WHERE coalesce(q.name::text,'') = coalesce(c.name::text,'') AND coalesce(q.email::text,'') = coalesce(c.email::text,'') AND coalesce(q.vin::text,'') = coalesce(c.vin::text,'') AND coalesce(q.cardNumber::text,'') = coalesce(c.cardNumber::text,'') AND coalesce(q.codeWord::text,'') = coalesce(c.codeWord::text,'') AND coalesce(q.phone::text,'') = coalesce(c.phone::text,'') AND coalesce(q.plateNum::text,'') = coalesce(c.plateNum::text,'') AND coalesce(q.validSince::text,'') = coalesce(c.validSince::text,'') AND coalesce(q.validUntil::text,'') = coalesce(c.validUntil::text,'') AND coalesce(q.startMileage::text,'') <> coalesce(c.startMileage::text,'') AND coalesce(q.make::text,'') = coalesce(c.make::text,'') AND coalesce(q.model::text,'') = coalesce(c.model::text,'') AND coalesce(q.makeYear::text,'') = coalesce(c.makeYear::text,'') AND coalesce(q.carClass::text,'') = coalesce(c.carClass::text,'') AND coalesce(q.color::text,'') = coalesce(c.color::text,'') AND coalesce(q.transmission::text,'') = coalesce(c.transmission::text,'') AND coalesce(q.engineVolume::text,'') = coalesce(c.engineVolume::text,'') AND coalesce(q.engineType::text,'') = coalesce(c.engineType::text,'') AND coalesce(q.buyDate::text,'') = coalesce(c.buyDate::text,'') AND coalesce(q.seller::text,'') = coalesce(c.seller::text,'') AND coalesce(q.lastCheckDealer::text,'') = coalesce(c.lastCheckDealer::text,'') AND coalesce(q.checkPeriod::text,'') = coalesce(c.checkPeriod::text,'') AND coalesce(q.checkType::text,'') = coalesce(c.checkType::text,'') AND coalesce(q.orderNumber::text,'') = coalesce(c.orderNumber::text,'') AND coalesce(q.managerName::text,'') = coalesce(c.managerName::text,'') AND coalesce(q.comment::text,'') = coalesce(c.comment::text,'') AND coalesce(q.legalForm::text,'') = coalesce(c.legalForm::text,'') AND coalesce(q.subprogram::text,'') = coalesce(c.subprogram::text,'') and c.id <> q.id AND (committer = 387 OR committer = 728)) group by row(name,email,vin,cardNumber,codeWord,phone,plateNum,validSince,validUntil,make,model,makeYear,carClass,color,transmission,engineVolume,engineType,buyDate,seller,lastCheckDealer,checkPeriod,checkType,orderNumber,managerName,comment,legalForm,subprogram);

alter table "Contract_dupes" add column id serial;
alter table "Contract_dupes" add column leader int4;

-- Mark group leaders (order by sets oldest/latest contract as group leader)
UPDATE "Contract_dupes" SET leader = s.leader FROM
(SELECT DISTINCT ON(id) unnest(array_agg) as leader, id FROM "Contract_dupes" ORDER BY id, leader DESC) s
WHERE "Contract_dupes".id = s.id;
CREATE INDEX ON "Contract_dupes" (leader);

-- Unnested list of all contracts to delete (non-leader dupes)
CREATE TEMPORARY TABLE "Contract_garbage" AS
SELECT DISTINCT unnest(array_agg) FROM "Contract_dupes";
CREATE INDEX ON "Contract_garbage" (unnest);
DELETE FROM "Contract_garbage" g WHERE EXISTS
(SELECT 1 FROM "Contract_dupes" q WHERE g.unnest = q.leader);

-- Delete unused dupe contracts. Leftovers are ignored.
DELETE FROM "Contract" c WHERE
EXISTS (SELECT 1 FROM "Contract_garbage" g WHERE g.unnest = c.id)
AND NOT EXISTS (SELECT 1 FROM casetbl l WHERE l.contract = c.id);
